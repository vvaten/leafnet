import itk
import numpy as np
from skimage import draw
from skimage.filters import threshold_otsu
from skimage.measure import regionprops as sk_regionprops
from skimage.segmentation import watershed as sk_watershed

# ITK Morphological Watershed
def itk_morphological_watershed(input_array:np.ndarray, level:float)->np.ndarray:
    '''
    Perform ITK morphological watershed on input image.
    args:
        input_array - Input float grayscale image.
        level - Level for ITK morphological watershed.
    return:
        Pixel-wise label for segmentation.
    '''
    gradientMagnitude = itk.GradientMagnitudeImageFilter.New(Input=itk.GetImageFromArray(input_array))
    itk_watershed = itk.MorphologicalWatershedImageFilter[itk.itkImagePython.itkImageD2, itk.itkImagePython.itkImageUS2].New(Input=gradientMagnitude.GetOutput())
    itk_watershed.SetLevel(level)
    return np.array(itk_watershed.GetOutput())

# Remove border areas and small areas from ITK Morphological Watershed
def polish_itk_morphological_output(input_array:np.ndarray, grayscale_array:np.ndarray, min_area:float)->np.ndarray:
    '''
    Remove area on cell walls, and remove small areas.
    args:
        input_array - Input pixel-wise label generated by ITK morphological watershed.
        grayscale_array - Denoised grayscale input image.
        min_area - Areas with a size smaller than this threshold will be removed.
    return:
        Polished pixel-wise label.
    '''
    removing_area = list()
    min_intensity = threshold_otsu(grayscale_array)
    for area in sk_regionprops(input_array):
        if area.area < min_area:
            removing_area.append(area.label)
        elif np.mean(grayscale_array[np.where(input_array == area.label)]) < min_intensity:
            removing_area.append(area.label)
    for area_id in removing_area:
        input_array[np.where(input_array==area_id)] = 0
    output_array = sk_watershed(np.zeros(input_array.shape, dtype=int), markers=input_array)
    return output_array

class divider():
    def __init__(self, min_cell_size = 100, divider_thres = 40):
        # Input
        self.divider_thres = divider_thres
        self.cell_min_size = min_cell_size

    # Divide Cells Using EDT Method
    def divide_cell(self, input_image, stoma_list, stoma_map = None):
        '''
        Generate pixel-wise cell label for input image.
        args:
            input_image - Input 8-bit grayscale image
            stoma_list - Input list containing labeled stomata, stomata is represented as [center_r, center_c, length, width, angle]
            stoma_map - Optional, boolean array of pixel-wise label for stomata.
        return:
            Pixel-wise cell label.
        '''
        input_image_f = input_image.copy().astype(float)
        # mask the Stomas
        if stoma_map == None:
            stoma_map = np.zeros(input_image.shape, dtype=bool)
            for stoma in stoma_list:
                rr, cc = draw.ellipse(stoma[0], stoma[1], int(stoma[2]*1.5), int(stoma[3]*1.5), rotation=-stoma[4])
                draw.set_color(stoma_map,[rr,cc],True)
        input_image_f[np.where(stoma_map)] = 0

        segmentation = itk_morphological_watershed(input_image_f, self.divider_thres)
        segmentation = polish_itk_morphological_output(segmentation, input_image_f, self.cell_min_size)
        return set(np.unique(segmentation)), segmentation